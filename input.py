{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNOxxiW2VivG5jkZVCq020s",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Tushar-Bhardwaj33/hackathon/blob/main/input.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install ffmpeg-python"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oEhFT9JzxAEq",
        "outputId": "c88aebda-4b97-49ce-d822-2ce7728dd33d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting ffmpeg-python\n",
            "  Downloading ffmpeg_python-0.2.0-py3-none-any.whl.metadata (1.7 kB)\n",
            "Requirement already satisfied: future in /usr/local/lib/python3.11/dist-packages (from ffmpeg-python) (1.0.0)\n",
            "Downloading ffmpeg_python-0.2.0-py3-none-any.whl (25 kB)\n",
            "Installing collected packages: ffmpeg-python\n",
            "Successfully installed ffmpeg-python-0.2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KjdI8LSHSx35",
        "outputId": "9b18f5f7-c485-4039-d403-e3044206c0c5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📂 Enter path to audio/video file: demo.mp4\n",
            "🎧 Converting to WAV...\n",
            "✅ Audio saved as: input.wav\n",
            "❌ Deleted old frames.\n",
            "🎯 FPS: 30.00\n",
            "🖼️ Extracting frames...\n",
            "✅ Frames saved in: frames/\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "import ffmpeg\n",
        "import glob\n",
        "\n",
        "def get_video_stream(file_path: str):\n",
        "    \"\"\"Return the video stream if present, else None.\"\"\"\n",
        "    probe = ffmpeg.probe(file_path)\n",
        "    for stream in probe['streams']:\n",
        "        if stream['codec_type'] == 'video':\n",
        "            return stream\n",
        "    return None\n",
        "\n",
        "def get_video_fps(video_stream) -> float:\n",
        "    \"\"\"Get the FPS from the video stream.\"\"\"\n",
        "    r_frame_rate = video_stream['r_frame_rate']\n",
        "    num, denom = map(int, r_frame_rate.split('/'))\n",
        "    return num / denom\n",
        "\n",
        "def delete_old_frames(frames_dir: str):\n",
        "    \"\"\"Delete old frames from the frames directory.\"\"\"\n",
        "    for frame_file in glob.glob(os.path.join(frames_dir, '*.png')):\n",
        "        os.remove(frame_file)\n",
        "    print(\"❌ Deleted old frames.\")\n",
        "\n",
        "def process_media_file(file_path: str, output_audio: str = 'input.wav', frames_dir: str = 'frames'):\n",
        "    file_path = os.path.abspath(file_path)\n",
        "\n",
        "    if not os.path.isfile(file_path):\n",
        "        raise FileNotFoundError(f\"❌ File not found: {file_path}\")\n",
        "\n",
        "    print(\"🎧 Converting to WAV...\")\n",
        "    (\n",
        "        ffmpeg\n",
        "        .input(file_path)\n",
        "        .output(output_audio, acodec='pcm_s16le', ac=2, ar=44100)\n",
        "        .overwrite_output()\n",
        "        .run(quiet=True)\n",
        "    )\n",
        "    print(f\"✅ Audio saved as: {output_audio}\")\n",
        "\n",
        "    # Check for video stream\n",
        "    video_stream = get_video_stream(file_path)\n",
        "    if not video_stream:\n",
        "        print(\"ℹ️ No video stream found. Skipping frame extraction.\")\n",
        "        return\n",
        "\n",
        "    # Frame extraction\n",
        "    os.makedirs(frames_dir, exist_ok=True)\n",
        "    delete_old_frames(frames_dir)\n",
        "\n",
        "    fps = get_video_fps(video_stream)\n",
        "    print(f\"🎯 FPS: {fps:.2f}\")\n",
        "    if fps < 1:\n",
        "        print(\"⚠️ Low FPS video detected. Frame extraction may be repetitive.\")\n",
        "\n",
        "    print(\"🖼️ Extracting frames...\")\n",
        "    (\n",
        "        ffmpeg\n",
        "        .input(file_path)\n",
        "        .output(os.path.join(frames_dir, 'frame_%06d.png'), vf=f\"fps=1\")\n",
        "        .overwrite_output()\n",
        "        .run(quiet=True)\n",
        "    )\n",
        "    print(f\"✅ Frames saved in: {frames_dir}/\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    path = input(\"📂 Enter path to audio/video file: \")\n",
        "    process_media_file(path)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install assemblyai"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6PVzGZld3koD",
        "outputId": "7393de59-94e7-4cb3-d2f6-42325caa5b96"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting assemblyai\n",
            "  Downloading assemblyai-0.38.0-py3-none-any.whl.metadata (29 kB)\n",
            "Requirement already satisfied: httpx>=0.19.0 in /usr/local/lib/python3.11/dist-packages (from assemblyai) (0.28.1)\n",
            "Requirement already satisfied: pydantic>=1.10.17 in /usr/local/lib/python3.11/dist-packages (from assemblyai) (2.11.2)\n",
            "Requirement already satisfied: typing-extensions>=3.7 in /usr/local/lib/python3.11/dist-packages (from assemblyai) (4.13.1)\n",
            "Requirement already satisfied: websockets>=11.0 in /usr/local/lib/python3.11/dist-packages (from assemblyai) (15.0.1)\n",
            "Requirement already satisfied: anyio in /usr/local/lib/python3.11/dist-packages (from httpx>=0.19.0->assemblyai) (4.9.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx>=0.19.0->assemblyai) (2025.1.31)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx>=0.19.0->assemblyai) (1.0.7)\n",
            "Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from httpx>=0.19.0->assemblyai) (3.10)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx>=0.19.0->assemblyai) (0.14.0)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic>=1.10.17->assemblyai) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.1 in /usr/local/lib/python3.11/dist-packages (from pydantic>=1.10.17->assemblyai) (2.33.1)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic>=1.10.17->assemblyai) (0.4.0)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio->httpx>=0.19.0->assemblyai) (1.3.1)\n",
            "Downloading assemblyai-0.38.0-py3-none-any.whl (44 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.3/44.3 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: assemblyai\n",
            "Successfully installed assemblyai-0.38.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import assemblyai as aai\n",
        "\n",
        "aai.settings.api_key = \"f30dfc0ca8c7406faef3bdfeecf45ff7\"\n",
        "\n",
        "transcriber = aai.Transcriber()\n",
        "\n",
        "# You can use a local filepath:\n",
        "# audio_file = \"./example.mp3\"\n",
        "\n",
        "# Or use a publicly-accessible URL:\n",
        "audio_file = \"input.wav\"\n",
        "\n",
        "config = aai.TranscriptionConfig(speaker_labels=True)\n",
        "\n",
        "transcript = transcriber.transcribe(audio_file, config)\n",
        "\n",
        "if transcript.status == aai.TranscriptStatus.error:\n",
        "    print(f\"Transcription failed: {transcript.error}\")\n",
        "    exit(1)\n",
        "\n",
        "print(f\" \\nFull Transcript: \\n\\n{transcript.text}\")\n",
        "\n",
        "print(\"\\nSpeaker Segmentation:\\n\")\n",
        "\n",
        "for utterance in transcript.utterances:\n",
        "    print(f\"Speaker {utterance.speaker}: {utterance.text}\")\n",
        "transcript."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gxs9JxYwuZDv",
        "outputId": "e133d1a8-359b-4f94-bd28-8534cfbca7b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " \n",
            "Full Transcript: \n",
            "\n",
            "Simo you don't tag don't yeah new technique. Okay thank you go. Jamba but. Kanji. Okay come and skip to early life. Okay okay. That. Yeah at this stage. Sa. Say go chanting saiga kamtoi yoga chi how much available so legal hole balls all day. WhatsApp. Okay Alec. Or something how many. Tele. Hair the test go. One nice like okay. Work. Ha. Yeah. Might say. You discussed sa. Dao say tamiya dao oh Mangan over Promoter over Promise. La. Jayako die Beljang. Said my goko scale manta yeah La community young network. Direction and lighty go one pacific I assume like. Kodi okay Mangun the impact of Hong Kong government policy on importing overseas or. Could be a statement they want or tang otai nigola career growth high bait oil statement they got impact I'm got may I then they official. Okay no daughter. Official digger I say like June tongue. Come I mean saudo kodijo lamajoban. Santa Kuai. Your. Yeah. The article I got house and Gobina completely identified Is that why they go king my. Chico. Okay definite okay. You. Know junior Hong Kong little single horn you go profession. Oh. Swimming dollars. Yao mofan p so. Repetitive daboo but BEI name Buddha so legal policy yeah. How style so fun be fun yeah. Hang out welcome one hung on where so gao yeah. Kotai koi okay Mulam yamo yamuki. What you have heard of go. Fun. High. Or the unknown. Hanko yeah. Mandal confirmed Have you recently searched for a full time job in Hong Kong in the past 12 months Chintz. Guessing you. Like I saw you. Thai. Koh industry. Anyway. I think so. Could there a. Whole lot. Planning to apply a job in Hong Kong in the next 12 months you know. Direction. Holding a okay I know it that's all Mo stand the thing or her main shirt so if you want so you know taikam auto honor signature I know what is going on not bad. All right. Chan gets in Daniel Dima. Check WhatsApp to come on yoga phone hoy fonta. So far business without legal policy could business okay working hours competitive like it's a hoy why they go working hours company got some audio skills short tension economic data research Singapore your horse yeah. Green man Thai go for game union study get her. Beneficial hoisi so yeah Ho efficient yeah ya benefits eating whole competitive attractor combined. Okay hold on. Passing with or without guy come to lead fund to organ additional benefits Daihong hai hai high tech DFM though Kuchang do kojanga culture Mayahai comes over business performing paying a tax competitiveness school I want to go say hi. The case. Of demon to haiko hat composite skill gap yao skill gap but they get like a skill gap exist regionally China cities job security job security might increase they found a GDPR. Building. Comedor both of okay necessary this and paleobi gasi hagam tincture okay Zawi John Pongo option level. Yeah from. With feeling threatened. Age. Group. Like. Come on. It. Of. Indifferent. Wake up. Expect the outcome my phone okay had him you want to come I think me. Data mining tawifies okay. Like. Downtown Jesus okay. Brainstorm potatoes and. Bye bye. Thank you come hoy come on big waijo yeah so go see your dodi. Okay. Say hai. You know they could take me a build I people. No I don't get yes. My. You. Okay. Job competitiveness. Technology patch of chong saga technology go form koja form the helling doctor officially signal me go and yeah don't we lay opinion. How. About that Dakota jokey inefficient race I raise awareness awareness business. Hang on oh. Hey. Yeah. Go high. Arabi competitiveness hello there. Control set fire. Hang on. Final impression helpless Taylor. Kazai lan so much huh. Say okay with man impact on Korea development okay impact of. Pinot. Darling my world the it wake. Okay impact. On. Local local workplace culture how am. I missing impact on impact on the. Local web page culture on the culture of culture of culture of workplace culture of workplace local work local culture of local workplace local workplace culture on the. Local. Cultural. Moon may cup yeah so. Dingaio gao jomo gao gay mo. Time. Harder. Or something. Eating haban yeah. Your communication. I mean I told you John. Han. Else and title project topic is speaker you go Santa. You know what. They tell JCI international. Thank you say. But. Okay. Somewhere. Yay. Yeah quickly recap. Die. Sorry. And I can't whether. Jim. Some networking suggestion. Teasing. Then I got. Angel price man. Dancing dancing dancing omaka. King. Go and tighten yeah. Haiko venue oh Korea special offer. Kuri. Career fair closing jogan. De. My. I say you. Sound support. Than you. Samsung fan. You. Think no happy hour side Kai Zhao Jong born. Dakala consideration. Hello yeah. Director event. A. Nelson Gonzo go see Ghana dun daga project. The official yeah. So. You know. More they usually don't. Like I don't. How I told. Jesus. For. The finalize go go. Okay impact on local shop market things. That impact our. High. Impact. So man point three.\n",
            "\n",
            "Speaker Segmentation:\n",
            "\n",
            "Speaker A: Simo you don't tag don't yeah new technique. Okay thank you go.\n",
            "Speaker B: Jamba but.\n",
            "Speaker A: Kanji.\n",
            "Speaker C: Okay come and skip to early life.\n",
            "Speaker A: Okay okay.\n",
            "Speaker D: That.\n",
            "Speaker C: Yeah at this stage.\n",
            "Speaker D: Sa.\n",
            "Speaker B: Say go chanting saiga kamtoi yoga chi how much available so legal hole balls all day.\n",
            "Speaker A: WhatsApp.\n",
            "Speaker B: Okay Alec.\n",
            "Speaker A: Or something how many.\n",
            "Speaker B: Tele.\n",
            "Speaker D: Hair the test go.\n",
            "Speaker B: One nice like okay.\n",
            "Speaker A: Work.\n",
            "Speaker D: Ha.\n",
            "Speaker A: Yeah.\n",
            "Speaker C: Might say.\n",
            "Speaker B: You discussed sa.\n",
            "Speaker C: Dao say tamiya dao oh Mangan over Promoter over Promise.\n",
            "Speaker B: La.\n",
            "Speaker D: Jayako die Beljang.\n",
            "Speaker B: Said my goko scale manta yeah La community young network.\n",
            "Speaker C: Direction and lighty go one pacific I assume like.\n",
            "Speaker A: Kodi okay Mangun the impact of Hong Kong government policy on importing overseas or.\n",
            "Speaker C: Could be a statement they want or tang otai nigola career growth high bait oil statement they got impact I'm got may I then they official.\n",
            "Speaker A: Okay no daughter.\n",
            "Speaker C: Official digger I say like June tongue.\n",
            "Speaker B: Come I mean saudo kodijo lamajoban.\n",
            "Speaker D: Santa Kuai.\n",
            "Speaker C: Your.\n",
            "Speaker D: Yeah.\n",
            "Speaker C: The article I got house and Gobina completely identified Is that why they go king my.\n",
            "Speaker B: Chico.\n",
            "Speaker A: Okay definite okay.\n",
            "Speaker D: You.\n",
            "Speaker A: Know junior Hong Kong little single horn you go profession.\n",
            "Speaker B: Oh.\n",
            "Speaker C: Swimming dollars.\n",
            "Speaker B: Yao mofan p so.\n",
            "Speaker C: Repetitive daboo but BEI name Buddha so legal policy yeah.\n",
            "Speaker B: How style so fun be fun yeah.\n",
            "Speaker C: Hang out welcome one hung on where so gao yeah.\n",
            "Speaker A: Kotai koi okay Mulam yamo yamuki. What you have heard of go.\n",
            "Speaker C: Fun.\n",
            "Speaker A: High.\n",
            "Speaker C: Or the unknown.\n",
            "Speaker D: Hanko yeah.\n",
            "Speaker A: Mandal confirmed Have you recently searched for a full time job in Hong Kong in the past 12 months Chintz.\n",
            "Speaker B: Guessing you.\n",
            "Speaker D: Like I saw you.\n",
            "Speaker B: Thai.\n",
            "Speaker C: Koh industry.\n",
            "Speaker A: Anyway.\n",
            "Speaker B: I think so.\n",
            "Speaker D: Could there a.\n",
            "Speaker C: Whole lot.\n",
            "Speaker A: Planning to apply a job in Hong Kong in the next 12 months you know.\n",
            "Speaker C: Direction.\n",
            "Speaker B: Holding a okay I know it that's all Mo stand the thing or her main shirt so if you want so you know taikam auto honor signature I know what is going on not bad. All right.\n",
            "Speaker D: Chan gets in Daniel Dima.\n",
            "Speaker B: Check WhatsApp to come on yoga phone hoy fonta.\n",
            "Speaker C: So far business without legal policy could business okay working hours competitive like it's a hoy why they go working hours company got some audio skills short tension economic data research Singapore your horse yeah.\n",
            "Speaker B: Green man Thai go for game union study get her.\n",
            "Speaker C: Beneficial hoisi so yeah Ho efficient yeah ya benefits eating whole competitive attractor combined.\n",
            "Speaker A: Okay hold on.\n",
            "Speaker C: Passing with or without guy come to lead fund to organ additional benefits Daihong hai hai high tech DFM though Kuchang do kojanga culture Mayahai comes over business performing paying a tax competitiveness school I want to go say hi.\n",
            "Speaker B: The case.\n",
            "Speaker C: Of demon to haiko hat composite skill gap yao skill gap but they get like a skill gap exist regionally China cities job security job security might increase they found a GDPR.\n",
            "Speaker D: Building.\n",
            "Speaker A: Comedor both of okay necessary this and paleobi gasi hagam tincture okay Zawi John Pongo option level.\n",
            "Speaker D: Yeah from.\n",
            "Speaker C: With feeling threatened.\n",
            "Speaker A: Age.\n",
            "Speaker E: Group.\n",
            "Speaker C: Like.\n",
            "Speaker A: Come on.\n",
            "Speaker B: It.\n",
            "Speaker A: Of.\n",
            "Speaker C: Indifferent.\n",
            "Speaker D: Wake up.\n",
            "Speaker C: Expect the outcome my phone okay had him you want to come I think me.\n",
            "Speaker A: Data mining tawifies okay.\n",
            "Speaker E: Like.\n",
            "Speaker D: Downtown Jesus okay.\n",
            "Speaker C: Brainstorm potatoes and.\n",
            "Speaker D: Bye bye.\n",
            "Speaker C: Thank you come hoy come on big waijo yeah so go see your dodi.\n",
            "Speaker A: Okay.\n",
            "Speaker D: Say hai.\n",
            "Speaker C: You know they could take me a build I people.\n",
            "Speaker D: No I don't get yes.\n",
            "Speaker B: My.\n",
            "Speaker C: You.\n",
            "Speaker D: Okay.\n",
            "Speaker A: Job competitiveness.\n",
            "Speaker C: Technology patch of chong saga technology go form koja form the helling doctor officially signal me go and yeah don't we lay opinion.\n",
            "Speaker A: How.\n",
            "Speaker C: About that Dakota jokey inefficient race I raise awareness awareness business.\n",
            "Speaker A: Hang on oh.\n",
            "Speaker B: Hey.\n",
            "Speaker A: Yeah.\n",
            "Speaker C: Go high.\n",
            "Speaker A: Arabi competitiveness hello there.\n",
            "Speaker C: Control set fire.\n",
            "Speaker D: Hang on.\n",
            "Speaker A: Final impression helpless Taylor.\n",
            "Speaker D: Kazai lan so much huh.\n",
            "Speaker A: Say okay with man impact on Korea development okay impact of.\n",
            "Speaker D: Pinot.\n",
            "Speaker C: Darling my world the it wake.\n",
            "Speaker A: Okay impact.\n",
            "Speaker C: On.\n",
            "Speaker A: Local local workplace culture how am.\n",
            "Speaker B: I missing impact on impact on the.\n",
            "Speaker A: Local web page culture on the culture of culture of culture of workplace culture of workplace local work local culture of local workplace local workplace culture on the.\n",
            "Speaker D: Local.\n",
            "Speaker A: Cultural.\n",
            "Speaker C: Moon may cup yeah so.\n",
            "Speaker A: Dingaio gao jomo gao gay mo.\n",
            "Speaker C: Time.\n",
            "Speaker A: Harder.\n",
            "Speaker C: Or something.\n",
            "Speaker A: Eating haban yeah.\n",
            "Speaker C: Your communication.\n",
            "Speaker E: I mean I told you John.\n",
            "Speaker A: Han.\n",
            "Speaker F: Else and title project topic is speaker you go Santa.\n",
            "Speaker B: You know what.\n",
            "Speaker F: They tell JCI international.\n",
            "Speaker A: Thank you say.\n",
            "Speaker C: But.\n",
            "Speaker A: Okay.\n",
            "Speaker E: Somewhere.\n",
            "Speaker C: Yay.\n",
            "Speaker F: Yeah quickly recap.\n",
            "Speaker C: Die.\n",
            "Speaker A: Sorry.\n",
            "Speaker C: And I can't whether.\n",
            "Speaker B: Jim.\n",
            "Speaker C: Some networking suggestion.\n",
            "Speaker E: Teasing.\n",
            "Speaker C: Then I got.\n",
            "Speaker F: Angel price man.\n",
            "Speaker E: Dancing dancing dancing omaka.\n",
            "Speaker D: King.\n",
            "Speaker C: Go and tighten yeah.\n",
            "Speaker E: Haiko venue oh Korea special offer.\n",
            "Speaker C: Kuri.\n",
            "Speaker F: Career fair closing jogan.\n",
            "Speaker D: De.\n",
            "Speaker A: My.\n",
            "Speaker E: I say you.\n",
            "Speaker A: Sound support.\n",
            "Speaker E: Than you.\n",
            "Speaker C: Samsung fan.\n",
            "Speaker B: You.\n",
            "Speaker E: Think no happy hour side Kai Zhao Jong born.\n",
            "Speaker C: Dakala consideration.\n",
            "Speaker A: Hello yeah.\n",
            "Speaker C: Director event.\n",
            "Speaker B: A.\n",
            "Speaker E: Nelson Gonzo go see Ghana dun daga project.\n",
            "Speaker C: The official yeah.\n",
            "Speaker B: So.\n",
            "Speaker C: You know.\n",
            "Speaker E: More they usually don't.\n",
            "Speaker C: Like I don't.\n",
            "Speaker A: How I told.\n",
            "Speaker C: Jesus.\n",
            "Speaker D: For.\n",
            "Speaker E: The finalize go go.\n",
            "Speaker A: Okay impact on local shop market things.\n",
            "Speaker C: That impact our.\n",
            "Speaker A: High.\n",
            "Speaker B: Impact.\n",
            "Speaker E: So man point three.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import assemblyai as aai\n",
        "\n",
        "aai.settings.api_key = \"f30dfc0ca8c7406faef3bdfeecf45ff7\"\n",
        "\n",
        "# audio_file = \"./local_file.mp3\"\n",
        "audio_file = \"input.wav\"\n",
        "config = aai.TranscriptionConfig(\n",
        "  speaker_labels=True,\n",
        "  language_code = \"zh\"\n",
        ")\n",
        "# config = aai.TranscriptionConfig(multichannel=True)\n",
        "config = aai.TranscriptionConfig()\n",
        "\n",
        "transcript = aai.Transcriber(config=config).transcribe(audio_file)\n",
        "\n",
        "if transcript.status == \"error\":\n",
        "  raise RuntimeError(f\"Transcription failed: {transcript.error}\")\n",
        "\n",
        "srt = transcript.export_subtitles_srt(\n",
        "  # Optional: Customize the maximum number of characters per caption\n",
        "  chars_per_caption=32\n",
        "  )\n",
        "\n",
        "with open(f\"transcript.srt\", \"w\") as srt_file:\n",
        "  srt_file.write(srt)\n",
        "\n",
        "text = transcript.text\n",
        "with open(f\"transcript.txt\", \"w\") as text_file:\n",
        "  text_file.write(text)\n",
        "\n",
        "# print(transcript.config)\n",
        "\n",
        "vtt = transcript.export_subtitles_vtt()\n",
        "with open(f\"transcript.vtt\", \"w\") as vtt_file:\n",
        "  vtt_file.write(vtt)"
      ],
      "metadata": {
        "id": "5bZ99Ucr6R8x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install deepgram-sdk\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bFazyZwTMLhl",
        "outputId": "ae6170b9-efc0-444b-e9cb-7b488b513f50"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting deepgram-sdk\n",
            "  Downloading deepgram_sdk-3.10.1-py3-none-any.whl.metadata (14 kB)\n",
            "Requirement already satisfied: httpx>=0.25.2 in /usr/local/lib/python3.11/dist-packages (from deepgram-sdk) (0.28.1)\n",
            "Requirement already satisfied: websockets>=12.0 in /usr/local/lib/python3.11/dist-packages (from deepgram-sdk) (15.0.1)\n",
            "Collecting dataclasses-json>=0.6.3 (from deepgram-sdk)\n",
            "  Downloading dataclasses_json-0.6.7-py3-none-any.whl.metadata (25 kB)\n",
            "Requirement already satisfied: typing_extensions>=4.9.0 in /usr/local/lib/python3.11/dist-packages (from deepgram-sdk) (4.13.1)\n",
            "Requirement already satisfied: aiohttp>=3.9.1 in /usr/local/lib/python3.11/dist-packages (from deepgram-sdk) (3.11.15)\n",
            "Collecting aiofiles>=23.2.1 (from deepgram-sdk)\n",
            "  Downloading aiofiles-24.1.0-py3-none-any.whl.metadata (10 kB)\n",
            "Collecting aenum>=3.1.0 (from deepgram-sdk)\n",
            "  Downloading aenum-3.1.15-py3-none-any.whl.metadata (3.7 kB)\n",
            "Collecting deprecation>=2.1.0 (from deepgram-sdk)\n",
            "  Downloading deprecation-2.1.0-py2.py3-none-any.whl.metadata (4.6 kB)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.9.1->deepgram-sdk) (2.6.1)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.9.1->deepgram-sdk) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.9.1->deepgram-sdk) (25.3.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.9.1->deepgram-sdk) (1.5.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.9.1->deepgram-sdk) (6.3.2)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.9.1->deepgram-sdk) (0.3.1)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.9.1->deepgram-sdk) (1.18.3)\n",
            "Collecting marshmallow<4.0.0,>=3.18.0 (from dataclasses-json>=0.6.3->deepgram-sdk)\n",
            "  Downloading marshmallow-3.26.1-py3-none-any.whl.metadata (7.3 kB)\n",
            "Collecting typing-inspect<1,>=0.4.0 (from dataclasses-json>=0.6.3->deepgram-sdk)\n",
            "  Downloading typing_inspect-0.9.0-py3-none-any.whl.metadata (1.5 kB)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from deprecation>=2.1.0->deepgram-sdk) (24.2)\n",
            "Requirement already satisfied: anyio in /usr/local/lib/python3.11/dist-packages (from httpx>=0.25.2->deepgram-sdk) (4.9.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx>=0.25.2->deepgram-sdk) (2025.1.31)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx>=0.25.2->deepgram-sdk) (1.0.7)\n",
            "Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from httpx>=0.25.2->deepgram-sdk) (3.10)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx>=0.25.2->deepgram-sdk) (0.14.0)\n",
            "Collecting mypy-extensions>=0.3.0 (from typing-inspect<1,>=0.4.0->dataclasses-json>=0.6.3->deepgram-sdk)\n",
            "  Downloading mypy_extensions-1.0.0-py3-none-any.whl.metadata (1.1 kB)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio->httpx>=0.25.2->deepgram-sdk) (1.3.1)\n",
            "Downloading deepgram_sdk-3.10.1-py3-none-any.whl (149 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m149.2/149.2 kB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading aenum-3.1.15-py3-none-any.whl (137 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m137.6/137.6 kB\u001b[0m \u001b[31m9.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading aiofiles-24.1.0-py3-none-any.whl (15 kB)\n",
            "Downloading dataclasses_json-0.6.7-py3-none-any.whl (28 kB)\n",
            "Downloading deprecation-2.1.0-py2.py3-none-any.whl (11 kB)\n",
            "Downloading marshmallow-3.26.1-py3-none-any.whl (50 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m50.9/50.9 kB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading typing_inspect-0.9.0-py3-none-any.whl (8.8 kB)\n",
            "Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n",
            "Installing collected packages: aenum, mypy-extensions, marshmallow, deprecation, aiofiles, typing-inspect, dataclasses-json, deepgram-sdk\n",
            "Successfully installed aenum-3.1.15 aiofiles-24.1.0 dataclasses-json-0.6.7 deepgram-sdk-3.10.1 deprecation-2.1.0 marshmallow-3.26.1 mypy-extensions-1.0.0 typing-inspect-0.9.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install --upgrade deepgram-sdk\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t4br5LTbUb0g",
        "outputId": "35c2783f-699c-439c-ea80-731faf312560"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: deepgram-sdk in /usr/local/lib/python3.11/dist-packages (3.10.1)\n",
            "Requirement already satisfied: httpx>=0.25.2 in /usr/local/lib/python3.11/dist-packages (from deepgram-sdk) (0.28.1)\n",
            "Requirement already satisfied: websockets>=12.0 in /usr/local/lib/python3.11/dist-packages (from deepgram-sdk) (15.0.1)\n",
            "Requirement already satisfied: dataclasses-json>=0.6.3 in /usr/local/lib/python3.11/dist-packages (from deepgram-sdk) (0.6.7)\n",
            "Requirement already satisfied: typing_extensions>=4.9.0 in /usr/local/lib/python3.11/dist-packages (from deepgram-sdk) (4.13.1)\n",
            "Requirement already satisfied: aiohttp>=3.9.1 in /usr/local/lib/python3.11/dist-packages (from deepgram-sdk) (3.11.15)\n",
            "Requirement already satisfied: aiofiles>=23.2.1 in /usr/local/lib/python3.11/dist-packages (from deepgram-sdk) (24.1.0)\n",
            "Requirement already satisfied: aenum>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from deepgram-sdk) (3.1.15)\n",
            "Requirement already satisfied: deprecation>=2.1.0 in /usr/local/lib/python3.11/dist-packages (from deepgram-sdk) (2.1.0)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.9.1->deepgram-sdk) (2.6.1)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.9.1->deepgram-sdk) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.9.1->deepgram-sdk) (25.3.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.9.1->deepgram-sdk) (1.5.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.9.1->deepgram-sdk) (6.3.2)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.9.1->deepgram-sdk) (0.3.1)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.9.1->deepgram-sdk) (1.18.3)\n",
            "Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.11/dist-packages (from dataclasses-json>=0.6.3->deepgram-sdk) (3.26.1)\n",
            "Requirement already satisfied: typing-inspect<1,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from dataclasses-json>=0.6.3->deepgram-sdk) (0.9.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from deprecation>=2.1.0->deepgram-sdk) (24.2)\n",
            "Requirement already satisfied: anyio in /usr/local/lib/python3.11/dist-packages (from httpx>=0.25.2->deepgram-sdk) (4.9.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx>=0.25.2->deepgram-sdk) (2025.1.31)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx>=0.25.2->deepgram-sdk) (1.0.7)\n",
            "Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from httpx>=0.25.2->deepgram-sdk) (3.10)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx>=0.25.2->deepgram-sdk) (0.14.0)\n",
            "Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json>=0.6.3->deepgram-sdk) (1.0.0)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio->httpx>=0.25.2->deepgram-sdk) (1.3.1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from deepgram import DeepgramClient, PrerecordedOptions\n",
        "import json\n",
        "\n",
        "# The API key we created in step 3\n",
        "DEEPGRAM_API_KEY = 'ef80cb9c2587aed2f56479350afd77aee9fd81de'\n",
        "\n",
        "# Replace with your file path\n",
        "PATH_TO_FILE = 'input.wav'\n",
        "OUTPUT_FILE = 'transcript.txt'\n",
        "\n",
        "def main():\n",
        "    deepgram = DeepgramClient(DEEPGRAM_API_KEY)\n",
        "\n",
        "    with open(PATH_TO_FILE, 'rb') as buffer_data:\n",
        "        payload = { 'buffer': buffer_data }\n",
        "\n",
        "        options = PrerecordedOptions(\n",
        "            smart_format=True,\n",
        "            model=\"nova-2\",\n",
        "            detect_language=True\n",
        "        )\n",
        "\n",
        "        response = deepgram.listen.prerecorded.v('1').transcribe_file(payload, options)\n",
        "\n",
        "        # Convert the response to JSON string\n",
        "        json_response = response.to_json(indent=4)\n",
        "\n",
        "        with open('output.json', 'w') as output_file:\n",
        "            output_file.write(json_response)\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pj7QEvxmL0vy",
        "outputId": "a6a4b1b5-50f0-48b6-eab7-90d37b4742b3"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:py.warnings:<ipython-input-77-63434ff13cf3>:23: DeprecatedWarning: prerecorded is deprecated as of 3.4.0 and will be removed in 4.0.0. deepgram.listen.prerecorded is deprecated. Use deepgram.listen.rest instead.\n",
            "  response = deepgram.listen.prerecorded.v('1').transcribe_file(payload, options)\n",
            "\n"
          ]
        }
      ]
    }
  ]
}